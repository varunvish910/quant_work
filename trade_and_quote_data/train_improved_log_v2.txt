================================================================================
🚀 TRAINING IMPROVED EARLY WARNING MODEL
================================================================================

Improvements:
  1. ✅ Expanded target window: 3-7 days (was 3-5)
  2. ✅ Severity prediction: Minor/Moderate/Major
  3. ✅ Seasonality features: Presidential cycle, OpEx, earnings
  4. ✅ Cross-asset features: TLT, GLD correlations
  5. ✅ SMOTE: Synthetic minority oversampling
  6. ✅ Regularization: L1/L2 penalties

================================================================================
STEP 1: LOADING DATA
================================================================================

📥 Loading SPY data from 2000-01-01 to 2024-12-31...
🔍 Validating data source: yfinance
   📊 Price range: $50.09 - $600.51
✅ Data validation passed: 6288 records from 2000-01-03 to 2024-12-30
✅ SPY data loaded: 6288 records
📥 Loading 10 sector ETFs...
   Loading XLU (Utilities)...
🔍 Validating data source: yfinance
   📊 Price range: $6.84 - $80.56
✅ Data validation passed: 6288 records from 2000-01-03 to 2024-12-30
   ✅ XLU loaded
   Loading XLK (Technology)...
🔍 Validating data source: yfinance
   📊 Price range: $8.64 - $239.92
✅ Data validation passed: 6288 records from 2000-01-03 to 2024-12-30
   ✅ XLK loaded
   Loading XLV (Healthcare)...
🔍 Validating data source: yfinance
   📊 Price range: $14.91 - $153.91
✅ Data validation passed: 6288 records from 2000-01-03 to 2024-12-30
   ✅ XLV loaded
   Loading XLF (Financials)...
🔍 Validating data source: yfinance
   📊 Price range: $3.71 - $50.60
✅ Data validation passed: 6288 records from 2000-01-03 to 2024-12-30
   ✅ XLF loaded
   Loading XLE (Energy)...
🔍 Validating data source: yfinance
   📊 Price range: $10.51 - $94.14
✅ Data validation passed: 6288 records from 2000-01-03 to 2024-12-30
   ✅ XLE loaded
   Loading XLI (Industrials)...
🔍 Validating data source: yfinance
   📊 Price range: $11.10 - $141.81
✅ Data validation passed: 6288 records from 2000-01-03 to 2024-12-30
   ✅ XLI loaded
   Loading XLY (Consumer Discretionary)...
🔍 Validating data source: yfinance
   📊 Price range: $13.03 - $237.40
✅ Data validation passed: 6288 records from 2000-01-03 to 2024-12-30
   ✅ XLY loaded
   Loading XLP (Consumer Staples)...
🔍 Validating data source: yfinance
   📊 Price range: $10.06 - $81.62
✅ Data validation passed: 6288 records from 2000-01-03 to 2024-12-30
   ✅ XLP loaded
   Loading XLB (Materials)...
🔍 Validating data source: yfinance
   📊 Price range: $9.79 - $95.72
✅ Data validation passed: 6288 records from 2000-01-03 to 2024-12-30
   ✅ XLB loaded
   Loading XLRE (Real Estate)...
🔍 Validating data source: yfinance
   📊 Price range: $19.51 - $45.64
✅ Data validation passed: 2322 records from 2015-10-08 to 2024-12-30
   ✅ XLRE loaded
✅ Loaded 10/10 sector ETFs
📥 Loading 4 rotation indicators...
   Loading MAGS (Magnificent 7)...
🔍 Validating data source: yfinance
   📊 Price range: $24.00 - $57.79
✅ Data validation passed: 434 records from 2023-04-11 to 2024-12-30
   ✅ MAGS loaded
   Loading RSP (Equal Weight S&P 500)...
🔍 Validating data source: yfinance
   📊 Price range: $15.64 - $184.51
✅ Data validation passed: 5454 records from 2003-05-01 to 2024-12-30
   ✅ RSP loaded
   Loading QQQ (Nasdaq 100)...
🔍 Validating data source: yfinance
   ❌ Failed to load QQQ: ❌ FORBIDDEN: Unrealistic price range 16.97-535.28 for ROTATION_ETF (expected 10-500)
   ⚠️  Continuing without QQQ
   Loading QQQE (Equal Weight Nasdaq 100)...
🔍 Validating data source: yfinance
   📊 Price range: $15.12 - $95.64
✅ Data validation passed: 3215 records from 2012-03-21 to 2024-12-30
   ✅ QQQE loaded
✅ Loaded 3/4 rotation indicators
💱 Loading currency data...
   Loading USDJPY (JPY=X)...
🔍 Validating data source: yfinance
   📊 Price range: $75.74 - $161.62
✅ Data validation passed: 6492 records from 2000-01-03 to 2024-12-30
   ✅ USDJPY loaded
   Loading EURUSD (EURUSD=X)...
🔍 Validating data source: yfinance
   📊 Price range: $0.96 - $1.60
✅ Data validation passed: 5472 records from 2003-12-01 to 2024-12-30
   ✅ EURUSD loaded
   Loading DXY (UUP)...
🔍 Validating data source: yfinance
   📊 Price range: $18.08 - $29.37
✅ Data validation passed: 4490 records from 2007-03-01 to 2024-12-30
   ✅ DXY loaded
✅ Loaded 3/3 currency pairs
📊 Loading volatility data...
   Loading VIX (^VIX)...
🔍 Validating data source: yfinance
   📊 Price range: $9.14 - $82.69
✅ Data validation passed: 6288 records from 2000-01-03 to 2024-12-30
   ✅ VIX loaded
   Loading VIX9D (^VIX9D)...
🔍 Validating data source: yfinance
   📊 Price range: $7.10 - $106.66
✅ Data validation passed: 3521 records from 2011-01-03 to 2024-12-30
   ✅ VIX9D loaded
   Loading VVIX (^VVIX)...
🔍 Validating data source: yfinance
   📊 Price range: $59.74 - $207.59
✅ Data validation passed: 4520 records from 2007-01-03 to 2024-12-30
   ✅ VVIX loaded
✅ Loaded 3/3 volatility indices
✅ Loaded options features

================================================================================
STEP 2: CREATING FEATURES
================================================================================

================================================================================
🔧 CALCULATING FEATURES
================================================================================
Feature sets: baseline, currency, volatility
📊 Calculating baseline features...
   ✅ Rotation indicators: 3 features
   ✅ Regime detection: 11 features
   ✅ Momentum exhaustion: 9 features
   ✅ Baseline features: 31
💱 Calculating currency features...
   ✅ Currency features: 12
📊 Calculating volatility features...
   ✅ Volatility features: 19
🧹 Cleaning features...
   Dropped 20 rows with missing critical features
   ✅ Clean data: 6268 records with 62 features
================================================================================
✅ FEATURE CALCULATION COMPLETE: 62 features
================================================================================
✅ Created 62 baseline features
✅ Added 30 options features

📅 Adding seasonality features...
✅ Added 26 seasonality features

🌍 Adding cross-asset features...
   📊 Downloading cross-asset data...
      Loading TLT (bonds)...
      Loading GLD (gold)...
      ✅ Added TLT features
      ✅ Added GLD features
   ✅ Created 13 cross-asset features
✅ Added 13 cross-asset features

✅ Total features: 136

================================================================================
STEP 3: CREATING IMPROVED TARGET
================================================================================

🎯 Creating Improved Early Warning Target
   Drawdown threshold: 2.0%
   Lead time: 3-7 days
   Lookforward window: 7 days
🎯 IMPROVED_EARLY_WARNING TARGET CREATED
   Total samples: 6,261
   Positive samples: 3,202 (51.1%)
   Negative samples: 3,059 (48.9%)
   Class balance: 0.96 (1.0 = perfect balance)

📊 Severity Distribution:
   None: 3059 (48.9%)
   Minor (2-3%): 1299 (20.7%)
   Moderate (3-5%): 1195 (19.1%)
   Major (5%+): 708 (11.3%)

📊 Cluster Analysis:
   Total signals: 3202
   Cluster starts: 397
   Avg signals per cluster: 8.1

================================================================================
STEP 4: PREPARING TRAINING DATA
================================================================================

Training: 5767 samples (51.8% positive)
Validation: 250 samples (47.2% positive)
Test: 244 samples (38.5% positive)

================================================================================
STEP 5: HANDLING MISSING VALUES
================================================================================

Checking for NaN values...
Found 37 features with NaN values:
   sma_200: 29 NaN values
   iv_skew_25d: 5767 NaN values
   iv_skew_10d: 5767 NaN values
   iv_skew_50d: 5767 NaN values
   put_iv_25d: 5767 NaN values
   call_iv_25d: 5767 NaN values
   iv_smile_curvature: 5767 NaN values
   iv_slope_25d: 5767 NaN values
   iv_slope_10d: 5767 NaN values
   atm_straddle_price_1w: 5767 NaN values
✅ Filled NaN values

================================================================================
STEP 6: APPLYING SMOTE FOR CLASS BALANCE
================================================================================

Before SMOTE: 5767 samples (2990 positive)
Traceback (most recent call last):
  File "/Users/varun/code/quant_final_final/trade_and_quote_data/train_improved_model.py", line 194, in <module>
    X_train_balanced, y_train_balanced = smote.fit_resample(X_train, y_train)
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/imblearn/base.py", line 202, in fit_resample
    return super().fit_resample(X, y, **params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/base.py", line 1363, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/imblearn/base.py", line 99, in fit_resample
    X, y, binarize_y = self._check_X_y(X, y)
                       ^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/imblearn/base.py", line 157, in _check_X_y
    X, y = validate_data(self, X=X, y=y, reset=True, accept_sparse=accept_sparse)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py", line 2971, in validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py", line 1368, in check_X_y
    X = check_array(
        ^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py", line 1105, in check_array
    _assert_all_finite(
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py", line 120, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py", line 169, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SMOTE does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
